apply plugin: 'java'

def genDir = "$buildDir/generated"

def genSrcDir = "$genDir/java"

def cedictDataPath = "cedict-data.txt"

def cedictCompressedDataPath = "cedict-data.gz"

def cedictDataUrl = 'http://www.mdbg.net/chindict/export/cedict/cedict_1_0_ts_utf-8_mdbg.txt.gz'

configurations {
	generate
}

dependencies {
	compile 'com.google.inject:guice:3.0:no_aop'
	compile 'com.j256.ormlite:ormlite-core:4.42'
	compile "org.slf4j:slf4j-api:${slf4jVersion}"
	generate project(':org.juzidian.build.pinyin')
	testCompile "junit:junit:${junitVersion}"
	testCompile "org.hamcrest:hamcrest-library:1.3"
	testCompile 'com.j256.ormlite:ormlite-jdbc:4.42'
	testCompile 'org.xerial:sqlite-jdbc:3.7.2'
}

sourceSets {
    main {
        java {
            srcDirs "$genSrcDir" 
        }
    }
}

task fetchCedictData {
	ext.srcUrl = "$cedictDataUrl"
	ext.destFile = file("$cedictCompressedDataPath")
	inputs.property 'srcUrl', srcUrl
	outputs.file destFile
	doLast {
		def outputStream = new FileOutputStream(destFile)
		println "Downloading CEDict data from $srcUrl"
		new URL("$srcUrl").withInputStream({
			outputStream << it
		})
	}
}

task uncompressCedictData {
	dependsOn fetchCedictData
	ext.srcFile = file("$cedictCompressedDataPath")
	ext.destFile = file("$cedictDataPath")
	inputs.file srcFile
	outputs.file destFile
	doLast {
		println "Uncompressing $srcFile to $destFile"
		def inputStream = new java.util.zip.GZIPInputStream(new FileInputStream(srcFile))
		new FileOutputStream(destFile) << inputStream
	}
}

task generateSources (type: JavaExec, dependsOn: uncompressCedictData) {
	ext.srcFile = file("$cedictDataPath")
	ext.destDir = file("$genSrcDir")
	inputs.file srcFile
	outputs.dir destDir
	classpath = configurations.generate
	main = 	'org.juzidian.build.pinyin.PinyinHelperGenerator'
	args srcFile, destDir, 'org.juzidian.core'
}

compileJava.dependsOn generateSources
