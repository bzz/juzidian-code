import java.io.FileInputStream
import java.io.FileNotFoundException
import java.io.InputStream
import java.sql.SQLException

import org.juzidian.cedict.CedictInputStreamProvider
import org.juzidian.cedict.CedictLoader
import org.juzidian.core.datastore.DbDictionaryDataStore
import org.juzidian.core.datastore.DbDictionaryDataStoreDbInitializer
import org.juzidian.core.datastore.DbDictionaryDataStoreEntryPopulator
import org.juzidian.core.inject.DictionaryModule

import com.google.inject.Guice
import com.google.inject.Injector
import com.j256.ormlite.jdbc.JdbcConnectionSource
import com.j256.ormlite.support.ConnectionSource

buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath "org.juzidian:org.juzidian.cedict:${juzidianVersion}"
		classpath "org.juzidian:org.juzidian.core:${juzidianVersion}"
		classpath "org.juzidian:org.juzidian.pinyin:${juzidianVersion}"
		classpath libraries.guice_no_aop
		classpath libraries.ormlite_jdbc
		classpath libraries.sqlite_jdbc
		classpath libraries.slf4j_simple
	}
}

def cedictDataUrl = 'http://www.mdbg.net/chindict/export/cedict/cedict_1_0_ts_utf-8_mdbg.txt.gz'

def buildDir = "$projectDir/build"

def cedictDataPath = "$buildDir/cedict.dat"

def cedictTimestampPath = "$buildDir/cedict.timestamp"

def cedictCompressedDataPath = "$buildDir/cedict.dat.gz"

def dictionaryDbPath = "$buildDir/juzidian_dictionary.db"

task clean << {
	project.delete("$buildDir")
}

task createBuildDir {
	outputs.dir "$buildDir"
	doLast {
		file("$buildDir").mkdirs()
	}
}

task fetchCedictData {
	dependsOn createBuildDir
	ext.srcUrl = "$cedictDataUrl"
	ext.destFile = file("$cedictCompressedDataPath")
	ext.timestampFile = file("$cedictTimestampPath")
	inputs.property 'srcUrl', srcUrl
	outputs.file destFile
	outputs.file timestampFile
	doLast {
		def outputStream = new FileOutputStream(destFile)
		println "Downloading CEDict data from $srcUrl"
		new URL("$srcUrl").withInputStream({
			outputStream << it
		})
		timestampFile.withWriter({
			it.println(new Date().getTime())
		})
	}
}

task uncompressCedictData {
	dependsOn fetchCedictData
	ext.srcFile = file("$cedictCompressedDataPath")
	ext.destFile = file("$cedictDataPath")
	inputs.file srcFile
	outputs.file destFile
	doLast {
		println "Uncompressing $srcFile to $destFile"
		def inputStream = new java.util.zip.GZIPInputStream(new FileInputStream(srcFile))
		new FileOutputStream(destFile) << inputStream
	}
}

task generateDatabase {
	dependsOn uncompressCedictData
	inputs.file file("$cedictDataPath")
	outputs.file file("$dictionaryDbPath")
	doLast {
		DictionaryDataBaseCreator.createDataBase(cedictDataPath, dictionaryDbPath)
	}
}

class DictionaryDataBaseCreator {

	static def createDataBase(cedictDataFile, dbFileName) {
		def jdbcUrl = "jdbc:sqlite:" + dbFileName
		def injector = Guice.createInjector(new DictionaryModule() {
			@Override
			protected ConnectionSource createConnectionSource() throws SQLException {
				return new JdbcConnectionSource(jdbcUrl)
			}
		});
		def dbInitializer = new DbDictionaryDataStoreDbInitializer(
				new DbDictionaryDataStoreEntryPopulator(new CedictLoader(new CedictInputStreamProvider() {
					@Override
					public InputStream getInputStream() {
						return new FileInputStream(cedictDataFile)
					}
				})));
		def dictionaryDataStore = injector.getInstance(DbDictionaryDataStore.class)
		dbInitializer.initializeDb(dictionaryDataStore)
	}

}