apply plugin: 'java'

def cedictDataUrl = 'http://www.mdbg.net/chindict/export/cedict/cedict_1_0_ts_utf-8_mdbg.txt.gz'

def buildDir = "build"

def cedictDataPath = "$buildDir/cedict.dat"

def cedictTimestampPath = "$buildDir/cedict.timestamp"

def cedictCompressedDataPath = "$buildDir/cedict.dat.gz"

def dictionaryDbPath = "$buildDir/juzidian_dictionary.db"

configurations {
	generate
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	compile "org.juzidian:org.juzidian.cedict:${juzidianVersion}"
	compile "org.juzidian:org.juzidian.core:${juzidianVersion}"
	compile "org.juzidian:org.juzidian.pinyin:${juzidianVersion}"
	compile libraries.guice_no_aop
	compile libraries.ormlite_jdbc
	compile libraries.sqlite_jdbc
	generate project.sourceSets.main.output
	generate libraries.slf4j_simple
}

task fetchCedictData {
	ext.srcUrl = "$cedictDataUrl"
	ext.destFile = file("$cedictCompressedDataPath")
	ext.timestampFile = file("$cedictTimestampPath")
	inputs.property 'srcUrl', srcUrl
	outputs.file destFile
	outputs.file timestampFile
	doLast {
		def outputStream = new FileOutputStream(destFile)
		println "Downloading CEDict data from $srcUrl"
		new URL("$srcUrl").withInputStream({
			outputStream << it
		})
		timestampFile.withWriter({
			it.println(new Date().getTime())
		})
	}
}

task uncompressCedictData {
	dependsOn fetchCedictData
	ext.srcFile = file("$cedictCompressedDataPath")
	ext.destFile = file("$cedictDataPath")
	inputs.file srcFile
	outputs.file destFile
	doLast {
		println "Uncompressing $srcFile to $destFile"
		def inputStream = new java.util.zip.GZIPInputStream(new FileInputStream(srcFile))
		new FileOutputStream(destFile) << inputStream
	}
}

task generateDatabase {
	dependsOn classes, uncompressCedictData
	inputs.file file("$cedictDataPath")
	outputs.file file("$dictionaryDbPath")
	doLast {
		mkdir("$buildDir")
		javaexec {
			main = 	'org.juzidian.build.data.DictionaryDataBaseCreator'
			classpath = configurations.compile.plus(configurations.generate)
			args cedictDataPath, dictionaryDbPath
		}
	}
}

clean.dependsOn cleanGenerateDatabase

eclipse.classpath.file {
	whenMerged { classpath ->
		// remove conflicting juzidian-core test source-set
		classpath.entries.removeAll { entry -> entry.kind == 'lib' && !entry.path.endsWith('.jar')}
	}
}
