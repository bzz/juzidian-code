import java.io.FileInputStream
import java.io.FileNotFoundException
import java.io.InputStream
import java.sql.SQLException

import groovy.xml.MarkupBuilder

import org.juzidian.cedict.CedictInputStreamProvider
import org.juzidian.cedict.CedictLoader
import org.juzidian.core.datastore.DbDictionaryDataStore
import org.juzidian.core.datastore.DbDictionaryDataStoreDbInitializer
import org.juzidian.core.datastore.DbDictionaryDataStoreEntryPopulator
import org.juzidian.core.inject.DictionaryModule

import com.google.inject.Guice
import com.google.inject.Injector
import com.j256.ormlite.jdbc.JdbcConnectionSource
import com.j256.ormlite.support.ConnectionSource

buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath "org.juzidian:org.juzidian.cedict:${juzidianVersion}"
		classpath "org.juzidian:org.juzidian.core:${juzidianVersion}"
		classpath "org.juzidian:org.juzidian.pinyin:${juzidianVersion}"
		classpath libraries.guice_no_aop
		classpath libraries.ormlite_jdbc
		classpath libraries.sqlite_jdbc
		classpath libraries.slf4j_simple
	}
}

ext.cedictDataUrl = 'http://www.mdbg.net/chindict/export/cedict/cedict_1_0_ts_utf-8_mdbg.txt.gz'

ext.buildDir = "$projectDir/build"

ext.cedictDataPath = "$buildDir/cedict.dat"

ext.cedictTimestampPath = "$buildDir/cedict.timestamp"

ext.dictionaryDbPath = "$buildDir/juzidian_dictionary.db"

ext.compressedDictionaryDbPath = "$buildDir/juzidian_dictionary.db.gz"

ext.compressedDictionaryDbSha1Path = "${compressedDictionaryDbPath}.SHA1"

ext.artifactRegistryPath = "$buildDir/registry.xml"

ext.dbFormat = "${DictionaryDataBaseInfo.getDataBaseFormatVersion()}"

ext.artifactRepositoryUrlPrefix = "https://s3.amazonaws.com/juzidian-dictionaries/"

task clean << {
	project.delete("$buildDir")
}

task createBuildDir {
	outputs.dir "$buildDir"
	doLast {
		file("$buildDir").mkdirs()
	}
}

task fetchCedictData {
	dependsOn createBuildDir
	inputs.property 'srcUrl', cedictDataUrl
	outputs.file cedictDataPath
	outputs.file cedictTimestampPath
	doLast {
		def outputStream = new FileOutputStream(cedictDataPath)
		println "Downloading CEDict data from $cedictDataUrl"
		new URL("$cedictDataUrl").withInputStream({
			outputStream << new java.util.zip.GZIPInputStream(it)
		})
		file("$cedictTimestampPath").withWriter({
			it.println(new Date().getTime())
		})
	}
}

task generateDatabase {
	dependsOn fetchCedictData
	inputs.file cedictDataPath
	inputs.property 'dbFormat', dbFormat
	outputs.file dictionaryDbPath
	doLast {
		DictionaryDataBaseCreator.createDataBase(cedictDataPath, dictionaryDbPath)
	}
}

task compressDatabase {
	dependsOn generateDatabase
	inputs.file dictionaryDbPath
	outputs.file compressedDictionaryDbPath
	doLast {
		ant.gzip(src: "$dictionaryDbPath", destfile: "$compressedDictionaryDbPath")
	}
}

task generateChecksum {
	dependsOn compressDatabase
	inputs.file compressedDictionaryDbPath
	outputs.file compressedDictionaryDbSha1Path
	doLast {
		ant.checksum(file: "$compressedDictionaryDbPath", algorithm: 'SHA1')
	}
}

task generateArtifactRegistry {
	dependsOn generateChecksum
	inputs.property 'dbFormat', dbFormat
	inputs.file compressedDictionaryDbSha1Path
	inputs.file cedictTimestampPath
	outputs.file artifactRegistryPath
	doLast {
		def xml = new MarkupBuilder(new FileWriter(artifactRegistryPath))
		xml.juzidianDictionaries() {
			dictionary(formatVersion: dbFormat) {
				sha1(file(compressedDictionaryDbSha1Path).text.trim())
				url("${artifactRepositoryUrlPrefix}${getDistArtifactName()}")
			}
		}
	}
}

task createDistArtifact(type: Copy) {
	dependsOn compressDatabase
	from file(compressedDictionaryDbPath).parent
	include file(compressedDictionaryDbPath).name
	into buildDir
	rename {
		getDistArtifactName()
	}
}

def getDistArtifactName() {
	def cedictTimestamp = new Long(file(cedictTimestampPath).text.trim())
	def cedictVersion = new Date(cedictTimestamp).format("yyyyMMddHHmmss", TimeZone.getTimeZone("GMT"))
	return "juzidian_dictionary_${dbFormat}_${cedictVersion}.db.gz"
}

task build {
	dependsOn generateDatabase
}

task dist {
	dependsOn createDistArtifact, generateArtifactRegistry
}

class DataBuildModule extends DictionaryModule {

	def jdbcUrl;

	public DataBuildModule(jdbcUrl) {
		this.jdbcUrl = jdbcUrl;
	}

	@Override
	protected ConnectionSource createConnectionSource() {
		return new JdbcConnectionSource(this.jdbcUrl);
	}

}

class DictionaryDataBaseCreator {

	static def createDataBase(cedictDataFile, dbFileName) {
		def jdbcUrl = "jdbc:sqlite:" + dbFileName
		def injector = Guice.createInjector(new DataBuildModule(jdbcUrl))
		def dbInitializer = new DbDictionaryDataStoreDbInitializer(
				new DbDictionaryDataStoreEntryPopulator(new CedictLoader(new CedictInputStreamProvider() {
					@Override
					public InputStream getInputStream() {
						return new FileInputStream(cedictDataFile)
					}
				})));
		def dictionaryDataStore = injector.getInstance(DbDictionaryDataStore.class)
		dbInitializer.initializeDb(dictionaryDataStore)
	}

}

class DictionaryDataBaseInfo {
	
	static def getDataBaseFormatVersion() {
		def injector = Guice.createInjector(new DataBuildModule("jdbc:sqlite::memory:"));
		def dataStore = injector.getInstance(DbDictionaryDataStore.class);
		return dataStore.getDataFormatVersion();
	}
	
}
