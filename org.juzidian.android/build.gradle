import org.juzidian.build.imggen.AndroidImageResourceGenerator
import org.juzidian.build.imggen.IconDescriptor
import org.juzidian.build.imggen.InputTypeToggleIcon
import org.juzidian.build.imggen.JuzidianLauncherIcon

 apply plugin: 'android'

ext.androidSdkDir = localProperties['sdk.dir']

dependencies {
	compile (project(':org.juzidian.core')) {
		/* slf4j-api conflicts with slf4j-android. */
		exclude group: 'org.slf4j', module: 'slf4j-api'
		exclude group: 'com.google.inject', module: 'guice'
	}
	compile project(':org.juzidian.pinyin')
	compile project(':org.juzidian.util')
	compile libraries.roboguice
	compile libraries.ormlite_android
	compile libraries.slf4j_android
}

project.ext.androidTargetPlatform = 'android-16'

android {
	compileSdkVersion = "${androidTargetPlatform}"
	defaultConfig {
		versionCode = juzidianReleaseSequenceNumber.toInteger()
		versionName = juzidianVersion
		minSdkVersion = 11
		targetSdkVersion = 17
	}
}

def generateImages(resDir) {
	def iconImageGenerator = new AndroidImageResourceGenerator(resDir)
	def icons = [
			new IconDescriptor("search_type_icon_reverse", new InputTypeToggleIcon("En")),
			new IconDescriptor("search_type_icon_pinyin", new InputTypeToggleIcon("æ‹¼")),
			new IconDescriptor("juzidian_launcher_icon", new JuzidianLauncherIcon())
	]
	iconImageGenerator.generateIconImages(icons)
}

def generateBuildInfoFile(resDir) {
	def rawDir = file("${resDir}/raw")
	rawDir.mkdirs()
	def buildInfoFile = file("${rawDir}/build_info")
	buildInfoFile.withWriter('UTF-8') {
		it.writeLine "timestamp=${buildInfo.buildDate.time}"
		it.writeLine "headCommit=${buildInfo.headCommit}"
	}
}

android.buildVariants.each { buildVariant ->
	def generateImagesTaskName = "generateImages${buildVariant.name}"
	def generateBuildInfoFileTaskName = "generateBuildInfoFile${buildVariant.name}"
	def resDir = file("build/res/all/${buildVariant.baseName}")
	task(generateImagesTaskName) {
		dependsOn buildVariant.mergeResources
		doLast {
			generateImages(resDir)
		}
	}
	task(generateBuildInfoFileTaskName) {
		dependsOn buildVariant.mergeResources
		doLast {
			generateBuildInfoFile(resDir)
		}
	}
	buildVariant.processResources.dependsOn generateImagesTaskName, generateBuildInfoFileTaskName
}

eclipse {
	classpath {
		plusConfigurations += configurations.compile
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'src', path: 'src/main/java'])
				node.appendNode('classpathentry', [kind: 'src', path: 'build/source/r/debug'])
				node.appendNode('classpathentry', [kind: 'lib', path: "${androidSdkDir}/platforms/${androidTargetPlatform}/android.jar"])
			}
		}
	}
}
