import freemarker.template.Configuration

import org.juzidian.build.imggen.AndroidImageResourceGenerator
import org.juzidian.build.imggen.CrossIcon
import org.juzidian.build.imggen.IconDescriptor
import org.juzidian.build.imggen.InputTypeToggleIcon
import org.juzidian.build.imggen.JuzidianLauncherIcon

apply plugin: 'android'
apply from: 'licenses.gradle'

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath libraries.freemarker
	}
}

ext.androidSdkDir = localProperties['sdk.dir']
ext.licensesDir = file("build/licenses")
def licensesHtmlTemplateFile = file("src/main/assets/licenses-template.ftl")
def licensesTextsHtmlFile = file("build/licenses.html")

dependencies {
	compile (project(':org.juzidian.core')) {
		exclude group: 'org.slf4j', module: 'slf4j-api'
		exclude group: 'com.google.inject', module: 'guice'
	}
	compile (project(':org.juzidian.dataload')) {
		exclude group: 'org.slf4j', module: 'slf4j-api'
		exclude group: 'com.google.inject', module: 'guice'
	}
	compile project(':org.juzidian.pinyin')
	compile project(':org.juzidian.util')
	compile libraries.roboguice
	compile libraries.ormlite_android
	compile libraries.slf4j_android
}

project.ext.androidTargetPlatform = 'android-16'

android {
	compileSdkVersion = "${androidTargetPlatform}"
	defaultConfig {
		versionCode = juzidianReleaseSequenceNumber.toInteger()
		versionName = juzidianVersion
		minSdkVersion = 11
		targetSdkVersion = 17
		buildToolsVersion "17.0"
	}
}

def generateImages(resDir) {
	def iconImageGenerator = new AndroidImageResourceGenerator(resDir)
	def icons = [
			new IconDescriptor("search_type_icon_reverse", new InputTypeToggleIcon("En")),
			new IconDescriptor("search_type_icon_pinyin", new InputTypeToggleIcon("æ‹¼")),
			new IconDescriptor("clear_input_icon", new CrossIcon()),
			new IconDescriptor("juzidian_launcher_icon", new JuzidianLauncherIcon())
	]
	iconImageGenerator.generateIconImages(icons)
}

def generateBuildInfoFile(resDir) {
	def rawDir = file("${resDir}/raw")
	rawDir.mkdirs()
	def buildInfoFile = file("${rawDir}/build_info")
	buildInfoFile.withWriter('UTF-8') {
		it.writeLine "timestamp=${buildInfo.buildDate.time}"
		it.writeLine "headCommit=${buildInfo.headCommit}"
	}
}

def licenseFile(license) {
	return file("$licensesDir/${license.key}.txt")
}

def retrieveLicenseTaskName(license) { "retrieveLicense-$license.key" }

def loadLicenseTextTaskName(license) { "loadLicenseText-$license.key" }

def createLicenseHtmlTaskName(license) { "createLicenseHtml-$license.key" }

def createHtml(text) {
	return text
		.replaceAll('<', '&lt;')
		.replaceAll('\n\n', '\n<br><br>\n')
}

licenses.each { license ->
	if (!license.text) {
		def licenseFile = licenseFile(license)
		task (retrieveLicenseTaskName(license)) {
			def licenseUrl = license.textUrl
			inputs.property 'url', licenseUrl
			outputs.file licenseFile
			doLast {
				licensesDir.mkdirs()
				def outputStream = new FileOutputStream(licenseFile)
				println "Downloading license text from $licenseUrl"
				new URL(licenseUrl).withInputStream {
					outputStream << it
				}
			}
		}
		task(loadLicenseTextTaskName(license)) {
			dependsOn retrieveLicenseTaskName(license)
			doLast {
				license.text = licenseFile.text
			}
		}
	}
	task(createLicenseHtmlTaskName(license)) {
		if (!license.text) {
			dependsOn loadLicenseTextTaskName(license)
		}
		doLast {
			license.html = createHtml(license.text)
		}
	}
}

task retrieveLicenses {
	licenses.each {
		dependsOn createLicenseHtmlTaskName(it)
	}
}

task licensesHtml {
	dependsOn retrieveLicenses
	inputs.file licensesDir
	inputs.property 'licenses', licenses
	inputs.file licensesHtmlTemplateFile
	outputs.file licensesTextsHtmlFile
	def config = new Configuration()
	config.setDirectoryForTemplateLoading(file(licensesHtmlTemplateFile.parent))
	def template = config.getTemplate(licensesHtmlTemplateFile.name);
	doLast {
		licensesTextsHtmlFile.delete()
		licensesTextsHtmlFile.withWriter {
			template.process([licenses: licenses], it)
		}
	}
}

android.applicationVariants.all { appVariant ->
	def generateImagesTaskName = "generateImages${appVariant.name}"
	def generateBuildInfoFileTaskName = "generateBuildInfoFile${appVariant.name}"
	def licensesHtmlTaskName = "licensesHtml${appVariant.name}"
	def removeLicensesTemplateTaskName = "deleteLicensesTemplate${appVariant.name}"
	def resDir = file("build/res/all/${appVariant.baseName}")
	def assetsDir = file("build/assets/${appVariant.baseName}")
	task(generateImagesTaskName) {
		dependsOn appVariant.mergeResources
		doLast {
			generateImages(resDir)
		}
	}
	task(generateBuildInfoFileTaskName) {
		dependsOn appVariant.mergeResources
		doLast {
			generateBuildInfoFile(resDir)
		}
	}
	task(licensesHtmlTaskName, type: Copy) {
		dependsOn licensesHtml
		dependsOn appVariant.mergeAssets
		from licensesTextsHtmlFile
		into assetsDir
	}
	task(removeLicensesTemplateTaskName, type: Delete) {
		dependsOn appVariant.mergeAssets
		delete("$assetsDir/$licensesHtmlTemplateFile.name")
	}
	appVariant.processResources.dependsOn generateImagesTaskName, generateBuildInfoFileTaskName, licensesHtmlTaskName,
		removeLicensesTemplateTaskName
}

eclipse {
	classpath {
		plusConfigurations += configurations.compile
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'src', path: 'src/main/java'])
				node.appendNode('classpathentry', [kind: 'src', path: 'build/source/r/debug'])
				node.appendNode('classpathentry', [kind: 'lib', path: "${androidSdkDir}/platforms/${androidTargetPlatform}/android.jar"])
			}
		}
	}
}
