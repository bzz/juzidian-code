apply plugin: 'android'

def adbExec = "${androidSdkDir}/platform-tools/adb"

def dictionaryDbDataFile = "${project(':org.juzidian.build.data').projectDir}/build/juzidian_dictionary.db"

dependencies {
	compile (project(':org.juzidian.core')) {
		/* slf4j-api conflicts with slf4j-android. */
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	compile (project(':org.juzidian.pinyin'))
	compile libraries.guice_no_aop
	compile libraries.ormlite_android
	compile libraries.slf4j_android
}

project.ext.androidTargetPlatform = 'android-16'

android {
	target = "${androidTargetPlatform}"
	defaultConfig {
		versionCode = "${juzidianReleaseSequenceNumber}"
		versionName = "${juzidianVersion}"
		minSdkVersion = 8
		targetSdkVersion = 15
	}
}

task installData {
	dependsOn ':org.juzidian.build.data:generateDatabase'
	inputs.file file("$dictionaryDbDataFile")
	doLast {
		exec {
			executable "${adbExec}"
			args 'root'
		}
		exec {
			executable "${adbExec}"
			args 'push'
			args "${dictionaryDbDataFile}"
			args "/data/data/org.juzidian.android/juzidian-dictionary.db"
		}
	}
}

eclipse {
	classpath {
		plusConfigurations += configurations.compile
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'src', path: 'src/main/java'])
				node.appendNode('classpathentry', [kind: 'src', path: 'build/source/debug'])
				node.appendNode('classpathentry', [kind: 'lib', path: "${androidSdkDir}/platforms/${androidTargetPlatform}/android.jar"])
			}
		}
	}
}
