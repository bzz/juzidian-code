apply plugin: 'android'

def rawResDir = "src/main/res/raw"

def dictionaryDbPath = "$rawResDir/juzidian_dictionary.db"

def cedictDataPath = "${project(':org.juzidian.core').projectDir}/cedict-data.txt"

configurations {
	generate
}

dependencies {
	compile (project(':org.juzidian.core')) {
		/* slf4j-api conflicts with slf4j-android. */
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	compile 'com.google.inject:guice:3.0:no_aop'
	compile 'com.j256.ormlite:ormlite-android:4.42'
	compile "org.slf4j:slf4j-android:${slf4jAndroidVersion}"
	compile files("$dictionaryDbPath") {
		builtBy 'generateResources'
	}
	generate project(':org.juzidian.build.data')
	generate 'org.xerial:sqlite-jdbc:3.7.2'
	generate 'com.j256.ormlite:ormlite-jdbc:4.42'
	generate "org.slf4j:slf4j-simple:${slf4jVersion}"
}

project.ext.androidTargetPlatform = 'android-16'

android {
	target = "${androidTargetPlatform}"
	defaultConfig {
		versionCode = "${juzidianReleaseSequenceNumber}"
		versionName = "${juzidianVersion}"
		minSdkVersion = 8
		targetSdkVersion = 15
	}
}

task generateResources {
	dependsOn ':org.juzidian.build.data:build'
	inputs.file file("$cedictDataPath")
	outputs.file file("$dictionaryDbPath")
	doLast {
		mkdir("$rawResDir")
		javaexec {
			main = 	'org.juzidian.build.data.DictionaryDataBaseCreator'
			classpath = configurations.generate
			args cedictDataPath, dictionaryDbPath
		}
	}
}

clean.dependsOn cleanGenerateResources

eclipse {
	classpath {
		plusConfigurations += configurations.compile
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'src', path: 'src/main/java'])
				node.appendNode('classpathentry', [kind: 'src', path: 'build/source/debug'])
				node.appendNode('classpathentry', [kind: 'lib', path: "${androidSdkDir}/platforms/${androidTargetPlatform}/android.jar"])
			}
		}
	}
}
