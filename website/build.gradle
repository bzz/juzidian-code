import javax.imageio.ImageIO
import org.juzidian.build.imggen.JuzidianLauncherIcon

buildscript {
	repositories {
		mavenCentral()
		mavenRepo name: 'Bintray', url: 'http://dl.bintray.com/content/aalmiray/kordamp'
	}
	dependencies {
		classpath 'org.kordamp:markdown-gradle-plugin:0.1'
	}
}

apply plugin: 'markdown'

def markdownDir = file("build/markdown")
def htmlFragmentsDir = file("build/html-fragments")
def genSiteDir = file("build/site")
def htmlHeaderFile = file("src/html/header")
def htmlFooterFile = file("src/html/footer")
def webSitePublishInfoFile = file("build/sitePublishInfo")

task copyCss(type: Copy) {
	from "src/css"
	into "$genSiteDir/css"
}

task copyMarkdown(type: Copy) {
	from "src/markdown"
	into markdownDir
}

task copyChangeLog(type: Copy) {
	from "../CHANGES"
	into markdownDir
	rename {
		"changelog.md"
	}
}

markdownToHtml {
	dependsOn copyChangeLog, copyMarkdown
	sourceDir markdownDir
	outputDir htmlFragmentsDir
}

task generateIconImage {
	def iconFile = file("$genSiteDir/img/juzidian-icon.png")
	def iconScale = 1.0
	inputs.property "iconScale", iconScale
	outputs.file iconFile
	doLast {
		iconFile.parentFile.mkdirs()
		ImageIO.write(new JuzidianLauncherIcon().render(iconScale), "png", iconFile);
	}
}

task build {
	description "Generates web site."
	dependsOn markdownToHtml, copyCss, generateIconImage
	inputs.file htmlFragmentsDir
	inputs.file htmlHeaderFile
	inputs.file htmlFooterFile
	outputs.file genSiteDir
	doLast {
		def tree = fileTree(htmlFragmentsDir)
		tree.visit { element ->
			def targetHtmlFile = file("$genSiteDir/$element.relativePath")
			if (!element.isDirectory()) {
				targetHtmlFile.parentFile.mkdirs()
				concatFiles([htmlHeaderFile, element.file, htmlFooterFile], targetHtmlFile)
			}
		}
	}
}

task clean(type: Delete) {
	description "Deletes built artifacts."
	delete 'build'
}

task publish {
	description "Publishes web site to network server."
	dependsOn build
	def host = webSitePublishHost
	def path = webSitePublishPath
	inputs.property 'publishHost', host
	inputs.property 'publishPath', path
	inputs.file genSiteDir
	outputs.file webSitePublishInfoFile
	doLast {
		println "Uploading web site to $host:$path"
		def user = prompt("rsync.username.$host", "Username for rsync to $host:")
		exec({
			commandLine 'rsync'
			/* trailing slash ensures only dir contents are copied (not dir itself) */
			args "-r", "$genSiteDir/", "$user@$host:$path"
		})
		/* create arbitrary output file for up-to-date check */
		webSitePublishInfoFile << "$host $path"
	}
}

def concatFiles (inputFiles, outputFile) {
	def inputStreams = inputFiles*.newInputStream()
	outputFile.withOutputStream { it << joinStreams(inputStreams) }
}

def joinStreams (Collection<InputStream> streams) {
	return new SequenceInputStream(enumeration(streams))
}

def enumeration (Collection items) {
	def itemsCopy = new ArrayList(items)
	return new Enumeration() {
		public boolean hasMoreElements() {
			return !itemsCopy.isEmpty()
		}
		public Object nextElement() {
			return itemsCopy.remove(0)
		}
	}
}

